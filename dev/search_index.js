var documenterSearchIndex = {"docs":
[{"location":"#MannTurbulence","page":"Home","title":"MannTurbulence","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MannTurbulence.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#MannTurbulence.Isotropic","page":"Home","title":"MannTurbulence.Isotropic","text":"Isotropic{T<:AbstractFloat}\n\nIsotropic turbulence spectral tensor generator.\n\nFields\n\nae::T: Energy parameter α·ε^(2/3)\nL::T: Length scale L\n\n\n\n\n\n","category":"type"},{"location":"#MannTurbulence.Isotropic-Tuple{Any, Any}","page":"Home","title":"MannTurbulence.Isotropic","text":"Isotropic(ae::Float64, L::Float64) -> Isotropic{Float64}\n\nCreate an isotropic tensor generator with given parameters.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.MannParameters","page":"Home","title":"MannTurbulence.MannParameters","text":"MannParameters(L, Γ, ae; kwargs...) -> MannParameters{Float64}\n\nCreate Mann parameters with Float64 precision.\n\n\n\n\n\n","category":"type"},{"location":"#MannTurbulence.MannParameters-2","page":"Home","title":"MannTurbulence.MannParameters","text":"MannParameters{T<:AbstractFloat}\n\nParameters for the Mann turbulence model with validation.\n\nFields\n\nL::T: Length scale L (must be > 0)\nΓ::T: Lifetime parameter Γ (must be > 0) \nae::T: Energy parameter α·ε^(2/3) (must be > 0)\nkappa::T: Von Kármán constant κ (default: 0.4)\nq::T: Spectral exponent q (default: 5/3)\nC::T: Kolmogorov constant C (default: 1.5)\nC_coherence::T: Coherence constant (default: 1.0)\n\nExample\n\nparams = MannParameters(L=33.6, Γ=3.9, ae=1.0)\n\n\n\n\n\n","category":"type"},{"location":"#MannTurbulence.Sheared","page":"Home","title":"MannTurbulence.Sheared","text":"Sheared{T<:AbstractFloat}\n\nSheared (Mann) turbulence spectral tensor generator.\n\nFields\n\nae::T: Energy parameter α·ε^(2/3)\nL::T: Length scale L\ngamma::T: Lifetime parameter Γ\n\n\n\n\n\n","category":"type"},{"location":"#MannTurbulence.Sheared-Tuple{Any, Any, Any}","page":"Home","title":"MannTurbulence.Sheared","text":"Sheared(ae::Float64, L::Float64, gamma::Float64) -> Sheared{Float64}\n\nCreate a sheared tensor generator with given parameters.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.ShearedSinc","page":"Home","title":"MannTurbulence.ShearedSinc","text":"ShearedSinc{T<:AbstractFloat}\n\nSheared spectral tensor with sinc correction for finite box effects.\n\nFields\n\nae::T: Energy parameter α·ε^(2/3)\nL::T: Length scale L\ngamma::T: Lifetime parameter Γ\nLy::T: Lateral box length\nLz::T: Vertical box length\ntol::T: Adaptive integration tolerance\nmin_depth::Int: Adaptive integration minimum depth\n\n\n\n\n\n","category":"type"},{"location":"#MannTurbulence.ShearedSinc-NTuple{7, Any}","page":"Home","title":"MannTurbulence.ShearedSinc","text":"ShearedSinc(ae::Float64, L::Float64, gamma::Float64, Ly::Float64, Lz::Float64, \n            tol::Float64, min_depth::Int) -> ShearedSinc{Float64}\n\nCreate a sheared tensor generator with sinc correction.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.TensorGenerator","page":"Home","title":"MannTurbulence.TensorGenerator","text":"Abstract base type for tensor generators.\n\n\n\n\n\n","category":"type"},{"location":"#MannTurbulence._generate_turbulence_slice!-NTuple{8, Any}","page":"Home","title":"MannTurbulence._generate_turbulence_slice!","text":"Helper function to process a single slice in turbulence generation.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence._generate_turbulence_slice_sinc!-NTuple{10, Any}","page":"Home","title":"MannTurbulence._generate_turbulence_slice_sinc!","text":"Helper function to process a single slice with sinc correction.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence._irfft3d-Union{Tuple{T}, Tuple{AbstractArray{Complex{T}, 3}, Int64}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence._irfft3d","text":"_irfft3d(input::AbstractArray{Complex{T},3}, nz::Int) -> Array{T,3} where T<:AbstractFloat\n\nPerform 3D inverse real FFT using FFTW with optimal performance.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.adaptive_quadrature_2d-NTuple{7, Any}","page":"Home","title":"MannTurbulence.adaptive_quadrature_2d","text":"adaptive_quadrature_2d(f, x0, x1, y0, y1, tol, min_depth) -> Matrix{Float64}\n\nSimplified 2D adaptive quadrature integration. For production use, implement full adaptive Simpson's rule.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.decomp","page":"Home","title":"MannTurbulence.decomp","text":"decomp(gen::TensorGenerator, K::AbstractVector{Float64}) -> Matrix{Float64}\n\nGenerate the tensor decomposition for given wave vector K.\n\n\n\n\n\n","category":"function"},{"location":"#MannTurbulence.decomp-Union{Tuple{T}, Tuple{Isotropic{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.decomp","text":"decomp(iso::Isotropic{T}, K::AbstractVector{T}) -> Matrix{T} where T<:AbstractFloat\n\nGenerate the decomposition of the isotropic spectral tensor.\n\nReturns φ(k) where φ*(k)φ(k) = Φ^ISO(k).\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.decomp-Union{Tuple{T}, Tuple{ShearedSinc{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.decomp","text":"decomp(sinc_gen::ShearedSinc{T}, K::AbstractVector{T}) -> Matrix{T} where T<:AbstractFloat\n\nGenerate the decomposition using Cholesky decomposition.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.decomp-Union{Tuple{T}, Tuple{Sheared{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.decomp","text":"decomp(sheared::Sheared{T}, K::AbstractVector{T}) -> Matrix{T} where T<:AbstractFloat\n\nGenerate the decomposition of the sheared (Mann) spectral tensor.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.freq_components-NTuple{6, Any}","page":"Home","title":"MannTurbulence.freq_components","text":"freq_components(Lx, Ly, Lz, Nx, Ny, Nz)\n\nGenerate wave number components for turbulence box specification using FFTW frequency functions.\n\nUses FFTW.fftfreq and FFTW.rfftfreq for optimal performance with FFTW plans.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.generate_turbulence-Union{Tuple{T}, Tuple{MannParameters{T}, Vararg{Any, 6}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.generate_turbulence","text":"generate_turbulence(params::MannParameters{T}, Lx, Ly, Lz, Nx, Ny, Nz; \n                    seed::Union{Int,Nothing}=nothing, \n                    parallel::Bool=true,\n                    use_sinc_correction::Bool=false) -> Tuple{Array{T,3}, Array{T,3}, Array{T,3}} where T<:AbstractFloat\n\nGenerate 3D turbulence box using FFT-based method.\n\nArguments\n\nparams: Mann turbulence parameters\nLx, Ly, Lz: Box dimensions\nNx, Ny, Nz: Grid points in each direction\nseed: Random seed for reproducibility (optional)\nparallel: Use parallel processing (default: true)\nuse_sinc_correction: Apply sinc correction for finite box effects (default: false)\n\nReturns\n\nTuple of (U, V, W) velocity field arrays\n\nMathematical formulation\n\nGenerates turbulence using the spectral method:\n\nCreate random Fourier coefficients ñ(k) ~ N(0,1)\nApply spectral tensor decomposition: û(k) = φ(k) · ñ(k)\nScale by volume and energy: û(k) *= √(8αε²/³π³/LxLyLz) * 2N\nInverse FFT to get physical space: u(x) = IFFT(û(k))\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.lifetime_approx-Tuple{Any}","page":"Home","title":"MannTurbulence.lifetime_approx","text":"lifetime_approx(kL::Float64) -> Float64\n\nLifetime approximation function for the Mann model. Implements the lifetime parameter approximation with bounds checking.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.mann_spectra-Union{Tuple{T}, Tuple{AbstractVector{T}, MannParameters{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.mann_spectra","text":"mann_spectra(kx::AbstractVector{T}, params::MannParameters{T}; \n             nr::Int=150, ntheta::Int=30) -> Tuple{Vector{T}, Vector{T}, Vector{T}, Vector{T}} where T<:AbstractFloat\n\nCompute Mann velocity spectra using 2D integration over polar coordinates.\n\nArguments\n\nkx: Array of streamwise wave numbers\nparams: Mann turbulence parameters\nnr: Number of radial integration points (default: 150)\nntheta: Number of angular integration points (default: 30)\n\nReturns\n\nTuple of (Suu, Svv, Sww, Suw) spectra arrays\n\nMathematical formulation\n\nComputes the one-dimensional spectra by integrating the 3D spectral tensor: Sᵢⱼ(kₓ) = ∫₀^∞ ∫₀^{2π} Φᵢⱼ(kₓ, r cos θ, r sin θ) r dr dθ\n\nwhere r = √(ky² + kz²) and θ = atan2(kz, ky).\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.precompute_frequency_components-NTuple{6, Any}","page":"Home","title":"MannTurbulence.precompute_frequency_components","text":"precompute_frequency_components(Lx, Ly, Lz, Nx, Ny, Nz) -> Tuple\n\nPrecompute and cache frequency components for performance optimization.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.random_tensor-Tuple{NTuple{4, Int64}}","page":"Home","title":"MannTurbulence.random_tensor","text":"random_tensor(dims::Tuple{Int,Int,Int,Int}; seed::Union{Int,Nothing}=nothing) -> Array{ComplexF64,4}\n\nGenerate random complex tensor with Gaussian distribution.\n\nArguments\n\ndims: Dimensions (Nx, Ny, Nz, 3) for the tensor\nseed: Optional random seed for reproducibility\n\nReturns\n\n4D array of complex numbers with unit variance\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.sheared_transform-Union{Tuple{T}, Tuple{Sheared{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.sheared_transform","text":"sheared_transform(sheared::Sheared{T}, K::AbstractVector{T}) -> Matrix{T} where T<:AbstractFloat\n\nCompute the isotropic to sheared tensor transformation matrix.\n\nImplements the transformation matrix A from Equations (12-16).\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.sinc2-Tuple{Any}","page":"Home","title":"MannTurbulence.sinc2","text":"sinc2(x) -> Float64\n\nUnnormalized sinc squared function: (sin(x)/x)²\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.spectral_tensor-Union{Tuple{T}, Tuple{MannParameters{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.spectral_tensor","text":"spectral_tensor(params::MannParameters{T}, K::AbstractVector{T}) -> Matrix{T} where T<:AbstractFloat\n\nGenerate the Mann spectral tensor for a given wave vector K.\n\nUses the sheared tensor implementation from tensors.jl.\n\nArguments\n\nparams: Mann turbulence parameters\nK: Wave vector [kx, ky, kz]\n\nReturns\n\n3×3 spectral tensor matrix Φᵢⱼ(k)\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.tensor","page":"Home","title":"MannTurbulence.tensor","text":"tensor(gen::TensorGenerator, K::AbstractVector{Float64}) -> Matrix{Float64}\n\nGenerate the spectral tensor for given wave vector K.\n\n\n\n\n\n","category":"function"},{"location":"#MannTurbulence.tensor-Union{Tuple{T}, Tuple{Isotropic{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.tensor","text":"tensor(iso::Isotropic{T}, K::AbstractVector{T}) -> Matrix{T} where T<:AbstractFloat\n\nGenerate the incompressible isotropic turbulence spectral tensor.\n\nImplements Equation (8): Φ^ISOij(k) = E(|k|)/(4π|k|^4) * (δij|k|^2 - ki*kj)\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.tensor-Union{Tuple{T}, Tuple{ShearedSinc{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.tensor","text":"tensor(sinc_gen::ShearedSinc{T}, K::AbstractVector{T}) -> Matrix{T} where T<:AbstractFloat\n\nGenerate the sheared spectral tensor with sinc correction.\n\nUses adaptive quadrature integration to account for finite box effects.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.tensor-Union{Tuple{T}, Tuple{Sheared{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.tensor","text":"tensor(sheared::Sheared{T}, K::AbstractVector{T}) -> Matrix{T} where T<:AbstractFloat\n\nGenerate the sheared (Mann) spectral tensor.\n\nImplements the Mann model transformation: Φ^Mann = A·Φ^ISO·A^T\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.trapezoidal_integral_2d-Union{Tuple{T}, Tuple{Matrix{T}, Vector{T}, Vector{T}}} where T<:AbstractFloat","page":"Home","title":"MannTurbulence.trapezoidal_integral_2d","text":"trapezoidal_integral_2d(f::Matrix{T}, x::Vector{T}, y::Vector{T}) -> T where T<:AbstractFloat\n\nCompute 2D trapezoidal integral using two successive 1D trapezoidal integrations. First integrates along the x-axis, then along the y-axis.\n\nArguments\n\nf: 2D matrix representing function values at grid points\nx: 1D array of x-coordinates (non-uniform spacing allowed)\ny: 1D array of y-coordinates (non-uniform spacing allowed)\n\nReturns\n\nApproximate integral value\n\nMathematical formulation\n\nFor a function f(x,y) sampled on a grid, computes: ∫∫ f(x,y) dx dy ≈ ∑ᵢ ∑ⱼ f(xᵢ,yⱼ) Δxᵢ Δyⱼ\n\nusing the trapezoidal rule for both dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.validate_turbulence_statistics-Tuple{Any, Any, Any}","page":"Home","title":"MannTurbulence.validate_turbulence_statistics","text":"validate_turbulence_statistics(U, V, W; expected_mean=0.0, tolerance=1e-10) -> Dict\n\nValidate statistical properties of generated turbulence.\n\nArguments\n\nU, V, W: Velocity field components\nexpected_mean: Expected mean value (default: 0.0)\ntolerance: Tolerance for mean check (default: 1e-10)\n\nReturns\n\nDictionary with statistical properties and validation results\n\n\n\n\n\n","category":"method"},{"location":"#MannTurbulence.vonkarman_spectrum-Tuple{Any, Any, Any}","page":"Home","title":"MannTurbulence.vonkarman_spectrum","text":"vonkarman_spectrum(ae::Float64, k::Float64, L::Float64) -> Float64\n\nVon Kármán energy spectrum function.\n\nArguments\n\nae: Energy parameter α·ε^(2/3)\nk: Wave number magnitude\nL: Length scale\n\n\n\n\n\n","category":"method"}]
}
